export class DateTime {
    private day : number;

    private month : number;

    private year : number;

    private hour : number;

    private minute : number;

    public constructor(day? : any, month? : any, year? : any, hour? : any, minute? : any) {
        if(((typeof day === 'number') || day === null) && ((typeof month === 'number') || month === null) && ((typeof year === 'number') || year === null) && ((typeof hour === 'number') || hour === null) && ((typeof minute === 'number') || minute === null)) {
            let __args = Array.prototype.slice.call(arguments);
            this.day = 0;
            this.month = 0;
            this.year = 0;
            this.hour = 0;
            this.minute = 0;
            this.day = 0;
            this.month = 0;
            this.year = 0;
            this.hour = 0;
            this.minute = 0;
            (() => {
                this.setDay(day);
                this.setMonth(month);
                this.setYear(year);
                this.setHour(hour);
                this.setMinute(minute);
            })();
        } else if(((typeof day === 'number') || day === null) && ((typeof month === 'number') || month === null) && ((typeof year === 'number') || year === null) && hour === undefined && minute === undefined) {
            let __args = Array.prototype.slice.call(arguments);
            this.day = 0;
            this.month = 0;
            this.year = 0;
            this.hour = 0;
            this.minute = 0;
            this.day = 0;
            this.month = 0;
            this.year = 0;
            this.hour = 0;
            this.minute = 0;
            (() => {
                this.setDay(day);
                this.setMonth(month);
            })();
        } else if(((typeof day === 'number') || day === null) && ((typeof month === 'number') || month === null) && year === undefined && hour === undefined && minute === undefined) {
            let __args = Array.prototype.slice.call(arguments);
            let hour : any = __args[0];
            let minute : any = __args[1];
            this.day = 0;
            this.month = 0;
            this.year = 0;
            this.hour = 0;
            this.minute = 0;
            this.day = 0;
            this.month = 0;
            this.year = 0;
            this.hour = 0;
            this.minute = 0;
            (() => {
                this.setHour(hour);
                this.setMinute(minute);
            })();
        } else throw new Error('invalid overload');
    }

    public getDay() : number {
        return this.day;
    }

    public setDay(day : number) {
        this.day = day;
    }

    public getMonth() : number {
        return this.month;
    }

    public setMonth(month : number) {
        this.month = month;
    }

    public getHour() : number {
        return this.hour;
    }

    public setHour(hour : number) {
        this.hour = hour;
    }

    public getMinute() : number {
        return this.minute;
    }

    public setMinute(minute : number) {
        this.minute = minute;
    }

    public getYear() : number {
        return this.year;
    }

    public setYear(year : number) {
        this.year = year;
    }

    public getTime() : string {
        return this.hour + ":" + this.minute;
    }

    public setTime(hour : number, minute : number) {
        this.setHour(hour);
        this.setMinute(minute);
    }

    public setDate(day : number, month : number, year : number) {
        if(day >= 1 && day < 32 && month >= 1 && month < 13 && year >= 1940 && year <= 2018) {
            this.setDay(day);
            this.setMonth(month);
            this.setYear(year);
        } else console.info("Invalid date value(s)");
    }

    public getDate() : string {
        return this.getDay() + "/" + this.getMonth() + "/" + this.getYear();
    }

    public setDateTime(day : number, month : number, year : number, hour : number, minute : number) {
        this.setDay(day);
        this.setMonth(month);
        this.setYear(year);
        this.setHour(hour);
        this.setMinute(minute);
    }

    public getDateTIme() : string {
        return "Date: " + this.getDay() + "/" + this.getMonth() + "/" + this.getYear() + " Time: " + this.getHour() + ":" + this.getMinute();
    }

    /**
     *
     * @return {string}
     */
    public toString() : string {
        if(this.day >= 10 && this.month >= 10) {
            return "Date: " + +this.day + "/" + this.month + "/" + this.year;
        } else if(this.day < 10 && this.month < 10) {
            return "Date: 0" + +this.day + "/0" + this.month + "/" + this.year;
        } else if(this.month < 10) {
            return "Date: " + +this.day + "/0" + this.month + "/" + this.year;
        } else return "Date: 0" + +this.day + "/" + this.month + "/" + this.year;
    }
}
DateTime["__class"] = "quickstart.DateTime";
DateTime["__interfaces"] = ["java.lang.Comparable"];


